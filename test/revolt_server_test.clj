(ns revolt-server-test
    (:use revolt)
    (:use revolt-server)
    (:use clojure.test))

(deftest signup-rejected-after-game-has-started
    (let [board (atom nil)
          player-ids (atom #{})
          transmit-responses (atom [])
          broadcast-responses (atom [])
          transmit #(swap! transmit-responses conj %2)
          broadcast #(swap! broadcast-responses conj %)
          handle #(do (reset! transmit-responses [])
                      (reset! broadcast-responses [])
                      (handle-message nil % transmit broadcast board nil player-ids))]
        (handle {:user-name "rob" :content {:type :signup}})
        (is (= #{"rob"} @player-ids))
        (is (= [{:content :signup-accepted :user-name "rob"}] @broadcast-responses))
        (handle {:user-name "joe" :content {:type :signup}})
        (is (= #{"rob" "joe"} @player-ids))
        (is (= [{:content :signup-accepted :user-name "joe"}] @broadcast-responses))
        (handle {:user-name "rob" :content {:type :start-game}})
        (is @board)
        (handle {:user-name "moe" :content {:type :signup}})
        (is (= #{"rob" "joe"} @player-ids))
        (is (= [{:content :game-already-started}] @transmit-responses))
        (handle {:user-name "moe" :content {:type :start-game}})
        (is (= [{:content :game-already-started}] @transmit-responses))))
