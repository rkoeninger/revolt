;; Analyzed by ClojureScript 0.0-2850
{:defs {url-decode {:protocol-inline nil, :name cemerick.url/url-decode, :variadic false, :file "resources\\public\\js\\compiled\\out\\cemerick\\url.cljs", :end-column 17, :method-params ([string]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{any clj-nil}, :variadic false, :max-fixed-arity 1}), :line 25, :end-line 25, :max-fixed-arity 1, :fn-var true, :arglists (quote ([string])), :test true}, translate-default {:protocol-inline nil, :name cemerick.url/translate-default, :variadic false, :file "resources\\public\\js\\compiled\\out\\cemerick\\url.cljs", :end-column 24, :method-params ([s old-default new-default]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic false, :max-fixed-arity 3}), :line 101, :end-line 101, :max-fixed-arity 3, :fn-var true, :arglists (quote ([s old-default new-default])), :test true}, map->query {:protocol-inline nil, :name cemerick.url/map->query, :variadic false, :file "resources\\public\\js\\compiled\\out\\cemerick\\url.cljs", :end-column 17, :method-params ([m]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{any clj-nil}, :variadic false, :max-fixed-arity 1}), :line 29, :end-line 29, :max-fixed-arity 1, :fn-var true, :arglists (quote ([m])), :test true}, URL {:num-fields 8, :protocols #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cemerick.url/Object cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}, :name cemerick.url/URL, :file "resources\\public\\js\\compiled\\out\\cemerick\\url.cljs", :end-column 15, :type true, :column 12, :internal-ctor true, :line 70, :record true, :end-line 70, :skip-protocol-flag #{cljs.core/IRecord cljs.core/IEquiv cljs.core/IHash cljs.core/ICollection cljs.core/ICounted cljs.core/ISeqable cljs.core/IMeta cljs.core/ICloneable cljs.core/IPrintWithWriter cljs.core/IWithMeta cljs.core/IAssociative cljs.core/IMap cljs.core/ILookup}}, url-creds {:protocol-inline nil, :private true, :name cemerick.url/url-creds, :variadic false, :file "resources\\public\\js\\compiled\\out\\cemerick\\url.cljs", :end-column 17, :method-params ([username password]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{any clj-nil}, :variadic false, :max-fixed-arity 2}), :line 65, :end-line 65, :max-fixed-arity 2, :fn-var true, :arglists (quote ([username password])), :test true}, split-param {:protocol-inline nil, :name cemerick.url/split-param, :variadic false, :file "resources\\public\\js\\compiled\\out\\cemerick\\url.cljs", :end-column 18, :method-params ([param]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/LazySeq, :variadic false, :max-fixed-arity 1}), :line 41, :end-line 41, :max-fixed-arity 1, :fn-var true, :arglists (quote ([param])), :test true}, ->URL {:protocol-inline nil, :name cemerick.url/->URL, :variadic false, :file "resources\\public\\js\\compiled\\out\\cemerick\\url.cljs", :end-column 15, :method-params ([protocol username password host port path query anchor]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :positional, :methods ({:tag cemerick.url/URL, :variadic false, :max-fixed-arity 8}), :line 70, :end-line 70, :max-fixed-arity 8, :fn-var true, :arglists (quote ([protocol username password host port path query anchor])), :test true}, port-str {:protocol-inline nil, :private true, :name cemerick.url/port-str, :variadic false, :file "resources\\public\\js\\compiled\\out\\cemerick\\url.cljs", :end-column 16, :method-params ([protocol port]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{any clj-nil}, :variadic false, :max-fixed-arity 2}), :line 57, :end-line 57, :max-fixed-arity 2, :fn-var true, :arglists (quote ([protocol port])), :test true}, url-encode {:protocol-inline nil, :name cemerick.url/url-encode, :variadic false, :file "resources\\public\\js\\compiled\\out\\cemerick\\url.cljs", :end-column 17, :method-params ([string]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{any clj-nil}, :variadic false, :max-fixed-arity 1}), :line 14, :end-line 14, :max-fixed-arity 1, :fn-var true, :arglists (quote ([string])), :test true}, query->map {:protocol-inline nil, :name cemerick.url/query->map, :variadic false, :file "resources\\public\\js\\compiled\\out\\cemerick\\url.cljs", :end-column 17, :method-params ([qstr]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{any clj-nil}, :variadic false, :max-fixed-arity 1}), :line 48, :end-line 48, :max-fixed-arity 1, :fn-var true, :arglists (quote ([qstr])), :test true}, url* {:protocol-inline nil, :private true, :name cemerick.url/url*, :variadic false, :file "resources\\public\\js\\compiled\\out\\cemerick\\url.cljs", :end-column 12, :method-params ([url]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cemerick.url/URL, :variadic false, :max-fixed-arity 1}), :line 108, :end-line 108, :max-fixed-arity 1, :fn-var true, :arglists (quote ([url])), :test true}, map->URL {:protocol-inline nil, :name cemerick.url/map->URL, :variadic false, :file "resources\\public\\js\\compiled\\out\\cemerick\\url.cljs", :end-column 15, :method-params ([G__21223]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :internal-ctor true, :factory :map, :methods ({:tag cemerick.url/URL, :variadic false, :max-fixed-arity 1}), :line 70, :end-line 70, :max-fixed-arity 1, :fn-var true, :arglists (quote ([G__21223])), :test true}, url {:protocol-inline nil, :name cemerick.url/url, :variadic true, :file "resources\\public\\js\\compiled\\out\\cemerick\\url.cljs", :end-column 10, :method-params ([url] [base-url path-segments]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil cemerick.url/URL}, :variadic false, :max-fixed-arity 1} {:tag clj, :variadic true, :max-fixed-arity 1}), :line 121, :end-line 121, :max-fixed-arity 1, :fn-var true, :arglists (quote ([url] [base-url & path-segments])), :doc "Returns a new URL record for the given url string(s).\n\n   The first argument must be a base url — either a complete url string, or\n   a pre-existing URL record instance that will serve as the basis for the new\n   URL.  Any additional arguments must be strings, which are interpreted as\n   relative paths that are successively resolved against the base url's path\n   to construct the final :path in the returned URL record. \n\n   This function does not perform any url-encoding.  Use `url-encode` to encode\n   URL path segments as desired before passing them into this fn.", :test true}}, :name cemerick.url, :doc nil, :excludes #{}, :use-macros {some->> clojure.core, some-> clojure.core}, :require-macros {clojure.core clojure.core}, :uses nil, :requires {uri goog.Uri, goog.Uri goog.Uri, string clojure.string, clojure.string clojure.string, pathetic.core pathetic.core, pathetic pathetic.core}, :imports nil}