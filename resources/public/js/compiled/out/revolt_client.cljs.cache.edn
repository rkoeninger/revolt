;; Analyzed by ClojureScript 0.0-2850
{:defs {user-name-box {:protocol-inline nil, :name revolt-client/user-name-box, :variadic false, :file "src\\client\\revolt_client.cljs.bak.cljs", :end-column 20, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag function, :variadic false, :max-fixed-arity 0}), :line 42, :end-line 42, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, get-bids {:protocol-inline nil, :name revolt-client/get-bids, :variadic false, :file "src\\client\\revolt_client.cljs.bak.cljs", :end-column 15, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 0}), :line 104, :end-line 104, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, parse-or-nil {:protocol-inline nil, :name revolt-client/parse-or-nil, :variadic false, :file "src\\client\\revolt_client.cljs.bak.cljs", :end-column 19, :method-params ([x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{any number}, :variadic false, :max-fixed-arity 1}), :line 93, :end-line 93, :max-fixed-arity 1, :fn-var true, :arglists (quote ([x])), :test true}, receive-msgs! {:protocol-inline nil, :name revolt-client/receive-msgs!, :variadic false, :file "src\\client\\revolt_client.cljs.bak.cljs", :end-column 20, :method-params ([!msgs server-ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core.async.impl.channels/ManyToManyChannel, :variadic false, :max-fixed-arity 2}), :line 149, :end-line 149, :max-fixed-arity 2, :fn-var true, :arglists (quote ([!msgs server-ch])), :test true}, message-box {:protocol-inline nil, :name revolt-client/message-box, :variadic false, :file "src\\client\\revolt_client.cljs.bak.cljs", :end-column 18, :method-params ([new-msg-ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag function, :variadic false, :max-fixed-arity 1}), :line 21, :end-line 21, :max-fixed-arity 1, :fn-var true, :arglists (quote ([new-msg-ch])), :test true}, element {:protocol-inline nil, :name revolt-client/element, :variadic false, :file "src\\client\\revolt_client.cljs.bak.cljs", :end-column 14, :method-params ([id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 13, :end-line 13, :max-fixed-arity 1, :fn-var true, :arglists (quote ([id])), :test true}, show-error {:protocol-inline nil, :name revolt-client/show-error, :variadic false, :file "src\\client\\revolt_client.cljs.bak.cljs", :end-column 17, :method-params ([error]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 163, :end-line 163, :max-fixed-arity 1, :fn-var true, :arglists (quote ([error])), :test true}, message-list {:protocol-inline nil, :name revolt-client/message-list, :variadic false, :file "src\\client\\revolt_client.cljs.bak.cljs", :end-column 19, :method-params ([!msgs]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag function, :variadic false, :max-fixed-arity 1}), :line 32, :end-line 32, :max-fixed-arity 1, :fn-var true, :arglists (quote ([!msgs])), :test true}, get-bid {:protocol-inline nil, :name revolt-client/get-bid, :variadic false, :file "src\\client\\revolt_client.cljs.bak.cljs", :end-column 14, :method-params ([id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/IMap, :variadic false, :max-fixed-arity 1}), :line 99, :end-line 99, :max-fixed-arity 1, :fn-var true, :arglists (quote ([id])), :test true}, value {:protocol-inline nil, :name revolt-client/value, :variadic false, :file "src\\client\\revolt_client.cljs.bak.cljs", :end-column 12, :method-params ([id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 14, :end-line 14, :max-fixed-arity 1, :fn-var true, :arglists (quote ([id])), :test true}, figure-grid {:protocol-inline nil, :name revolt-client/figure-grid, :variadic false, :file "src\\client\\revolt_client.cljs.bak.cljs", :end-column 18, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag function, :variadic false, :max-fixed-arity 0}), :line 110, :end-line 110, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, zero-bid {:file "src\\client\\revolt_client.cljs.bak.cljs", :end-column 14, :end-line 97, :column 1, :line 97, :test true, :name revolt-client/zero-bid}, !message-channel {:file "src\\client\\revolt_client.cljs.bak.cljs", :end-column 22, :end-line 11, :column 1, :line 11, :test true, :name revolt-client/!message-channel}, get-val {:protocol-inline nil, :name revolt-client/get-val, :variadic false, :file "src\\client\\revolt_client.cljs.bak.cljs", :end-column 14, :method-params ([id suffix]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{any number}, :variadic false, :max-fixed-arity 2}), :line 95, :end-line 95, :max-fixed-arity 2, :fn-var true, :arglists (quote ([id suffix])), :test true}, ws-url {:file "src\\client\\revolt_client.cljs.bak.cljs", :end-column 12, :end-line 161, :column 1, :line 161, :test true, :name revolt-client/ws-url}, read-message {:protocol-inline nil, :name revolt-client/read-message, :variadic false, :file "src\\client\\revolt_client.cljs.bak.cljs", :end-column 19, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/IMap, :variadic false, :max-fixed-arity 0}), :line 17, :end-line 17, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}, figure-input {:protocol-inline nil, :name revolt-client/figure-input, :variadic false, :file "src\\client\\revolt_client.cljs.bak.cljs", :end-column 19, :method-params ([id]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag function, :variadic false, :max-fixed-arity 1}), :line 67, :end-line 67, :max-fixed-arity 1, :fn-var true, :arglists (quote ([id])), :test true}, figure-ids {:file "src\\client\\revolt_client.cljs.bak.cljs", :end-column 16, :end-line 75, :column 1, :line 75, :test true, :name revolt-client/figure-ids}, send-receive {:protocol-inline nil, :name revolt-client/send-receive, :variadic false, :file "src\\client\\revolt_client.cljs.bak.cljs", :end-column 19, :method-params ([ws-channel]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 170, :end-line 170, :max-fixed-arity 1, :fn-var true, :arglists (quote ([ws-channel])), :test true}, send-msgs! {:protocol-inline nil, :name revolt-client/send-msgs!, :variadic false, :file "src\\client\\revolt_client.cljs.bak.cljs", :end-column 17, :method-params ([new-msg-ch server-ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core.async.impl.channels/ManyToManyChannel, :variadic false, :max-fixed-arity 2}), :line 155, :end-line 155, :max-fixed-arity 2, :fn-var true, :arglists (quote ([new-msg-ch server-ch])), :test true}, message-component {:protocol-inline nil, :name revolt-client/message-component, :variadic false, :file "src\\client\\revolt_client.cljs.bak.cljs", :end-column 24, :method-params ([!msgs new-msg-ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag function, :variadic false, :max-fixed-arity 2}), :line 141, :end-line 141, :max-fixed-arity 2, :fn-var true, :arglists (quote ([!msgs new-msg-ch])), :test true}, set-value {:protocol-inline nil, :name revolt-client/set-value, :variadic false, :file "src\\client\\revolt_client.cljs.bak.cljs", :end-column 16, :method-params ([id x]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 2}), :line 15, :end-line 15, :max-fixed-arity 2, :fn-var true, :arglists (quote ([id x])), :test true}}, :name revolt-client, :doc nil, :excludes #{}, :use-macros {go cljs.core.async.macros, go-loop cljs.core.async.macros}, :require-macros {f flow.core, flow.core flow.core, cljs.core.async.macros cljs.core.async.macros}, :uses {<! cljs.core.async, chan cljs.core.async, ws-ch chord.client, >! cljs.core.async, url cemerick.url, put! cljs.core.async}, :requires {cemerick.url cemerick.url, f flow.core, flow.core flow.core, edn cljs.reader, cljs.reader cljs.reader, cljs.core.async cljs.core.async, chord.client chord.client}, :imports nil}