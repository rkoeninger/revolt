;; Analyzed by ClojureScript 0.0-2850
{:defs {relativize {:protocol-inline nil, :name pathetic.core/relativize, :variadic false, :file "resources\\public\\js\\compiled\\out\\pathetic\\core.cljs", :end-column 17, :method-params ([base-path dest-path]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 2}), :line 185, :end-line 185, :max-fixed-arity 2, :fn-var true, :arglists (quote ([base-path dest-path])), :doc "Takes two absolute paths or two relative paths, and returns a relative path\n   that indicates the same file system location as destination-path, but\n   relative to base-path.", :test true}, separator {:file "resources\\public\\js\\compiled\\out\\pathetic\\core.cljs", :end-column 32, :end-line 11, :column 1, :line 11, :private true, :test true, :name pathetic.core/separator}, unique-suffix {:protocol-inline nil, :private true, :name pathetic.core/unique-suffix, :variadic false, :file "resources\\public\\js\\compiled\\out\\pathetic\\core.cljs", :end-column 21, :method-params ([uninteresting-coll interesting-coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/LazySeq, :variadic false, :max-fixed-arity 2}), :line 35, :end-line 35, :max-fixed-arity 2, :fn-var true, :arglists (quote ([uninteresting-coll interesting-coll])), :doc "Returns the elements of interesting-coll that are not part of the common\n   prefix with uninteresting-coll.", :test true}, ends-with {:protocol-inline nil, :name pathetic.core/ends-with, :variadic false, :file "resources\\public\\js\\compiled\\out\\pathetic\\core.cljs", :end-column 16, :method-params ([s suffix]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 2}), :line 226, :end-line 226, :max-fixed-arity 2, :fn-var true, :arglists (quote ([s suffix])), :test true}, normalize {:protocol-inline nil, :name pathetic.core/normalize, :variadic false, :file "resources\\public\\js\\compiled\\out\\pathetic\\core.cljs", :end-column 16, :method-params ([path]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 153, :end-line 153, :max-fixed-arity 1, :fn-var true, :arglists (quote ([path])), :doc "Cleans up a path so that it has no leading/trailing whitespace, and\n   removes any unremovable same-/parent-dir references. Takes the path\n   argument as a string and returns its result as a string.", :test true}, url-normalize {:protocol-inline nil, :name pathetic.core/url-normalize, :variadic false, :file "resources\\public\\js\\compiled\\out\\pathetic\\core.cljs", :end-column 20, :method-params ([url-or-string]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 270, :end-line 270, :max-fixed-arity 1, :fn-var true, :arglists (quote ([url-or-string])), :doc "Behaves like normalize on the path part of a URL, but takes a j.n.URL or\n   string containing a URL, and returns a string containing the same URL\n   instead of just a path. Everything but the path part of the URL is unchanged\n   (query, anchor, protocol, etc).", :test true}, split-url-on-path {:protocol-inline nil, :name pathetic.core/split-url-on-path, :variadic false, :file "resources\\public\\js\\compiled\\out\\pathetic\\core.cljs", :end-column 24, :method-params ([url-or-string]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/IVector, :variadic false, :max-fixed-arity 1}), :line 256, :end-line 256, :max-fixed-arity 1, :fn-var true, :arglists (quote ([url-or-string])), :doc "Given a URL or string containing a URL, returns a vector of the three\n   component strings: the stuff before the path, the path, and the stuff\n   after the path. Useful for destructuring.", :test true}, render-path {:protocol-inline nil, :name pathetic.core/render-path, :variadic false, :file "resources\\public\\js\\compiled\\out\\pathetic\\core.cljs", :end-column 18, :method-params ([path-pieces]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic false, :max-fixed-arity 1}), :line 81, :end-line 81, :max-fixed-arity 1, :fn-var true, :arglists (quote ([path-pieces])), :doc "Given a seq of path elements as created by parse-path, returns a string\n   containing the path represented. This function will only\n   ever use unix-style path rules, so an absolute path will always start with\n   the \"/\" separator.\n\n   NOTE: It is NOT the goal of this function to perform normalization, it just\n   renders what it is given. HOWEVER, that does NOT mean that it is always true\n   that (= (render-path (parse-path some-path)) some-path). That is, you may not\n   render the exact same string you parsed. This is because the path syntax does\n   not have exactly one way to write every path.", :test true}, starts-with {:protocol-inline nil, :name pathetic.core/starts-with, :variadic false, :file "resources\\public\\js\\compiled\\out\\pathetic\\core.cljs", :end-column 18, :method-params ([s prefix]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 2}), :line 110, :end-line 110, :max-fixed-arity 2, :fn-var true, :arglists (quote ([s prefix])), :test true}, relativize* {:protocol-inline nil, :name pathetic.core/relativize*, :variadic false, :file "resources\\public\\js\\compiled\\out\\pathetic\\core.cljs", :end-column 18, :method-params ([base-path dest-path]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/LazySeq, :variadic false, :max-fixed-arity 2}), :line 160, :end-line 160, :max-fixed-arity 2, :fn-var true, :arglists (quote ([base-path dest-path])), :doc "Takes two absolute paths or two relative paths, and returns a relative path\n   that indicates the same file system location as dest-path, but\n   relative to base-path. Paths should be path vectors, and the return\n   value is also a path vector.", :test true}, common-prefix {:protocol-inline nil, :private true, :name pathetic.core/common-prefix, :variadic false, :file "resources\\public\\js\\compiled\\out\\pathetic\\core.cljs", :end-column 21, :method-params ([coll1 coll2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/LazySeq, :variadic false, :max-fixed-arity 2}), :line 28, :end-line 28, :max-fixed-arity 2, :fn-var true, :arglists (quote ([coll1 coll2])), :doc "Given two collections, returns a sequence containing the prefix they\n   share. Example: (common-prefix [\\a \\b] [\\a \\b \\c \\d]) -> (\\a \\b)", :test true}, parse-path {:protocol-inline nil, :name pathetic.core/parse-path, :variadic false, :file "resources\\public\\js\\compiled\\out\\pathetic\\core.cljs", :end-column 17, :method-params ([path]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil cljs.core/IVector clj-nil}, :variadic false, :max-fixed-arity 1}), :line 54, :end-line 54, :max-fixed-arity 1, :fn-var true, :arglists (quote ([path])), :doc "Given a j.io.File or string containing a relative or absolute path,\n   returns the corresponding path vector data structure described at\n   the top of the file.\n\n   This function does not do any normalization or simplification. However,\n   because there is more than one way to write some paths, some simplification\n   might happen anyways, such as if the path starts with a (redundant) \".\".", :test true}, separator-pattern {:file "resources\\public\\js\\compiled\\out\\pathetic\\core.cljs", :end-column 40, :end-line 12, :column 1, :line 12, :private true, :test true, :name pathetic.core/separator-pattern}, normalize* {:protocol-inline nil, :name pathetic.core/normalize*, :variadic false, :file "resources\\public\\js\\compiled\\out\\pathetic\\core.cljs", :end-column 17, :method-params ([path-pieces]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/IVector, :variadic false, :max-fixed-arity 1}), :line 135, :end-line 135, :max-fixed-arity 1, :fn-var true, :arglists (quote ([path-pieces])), :doc "Cleans up a path so that it has no leading/trailing whitespace, and\n   removes any removable same-/parent-dir references. path-pieces\n   should be a path vector in the format returned by parse-path;\n   return value is a vector in the same format.", :test true}, resolve* {:protocol-inline nil, :name pathetic.core/resolve*, :variadic false, :file "resources\\public\\js\\compiled\\out\\pathetic\\core.cljs", :end-column 15, :method-params ([base-path other-path]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil cljs.core/LazySeq}, :variadic false, :max-fixed-arity 2}), :line 194, :end-line 194, :max-fixed-arity 2, :fn-var true, :arglists (quote ([base-path other-path])), :doc "Resolve the other-path against the base-path. If other-path is absolute,\n   the result is other-path. If other-path is nil, the result is base-path.\n   Otherwise, the result is other-path concatenated onto base-path. Does not\n   normalize its output. All inputs and outputs are path vectors.", :test true}, up-dir {:protocol-inline nil, :name pathetic.core/up-dir, :variadic false, :file "resources\\public\\js\\compiled\\out\\pathetic\\core.cljs", :end-column 13, :method-params ([path-pieces]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil clj clj-nil}, :variadic false, :max-fixed-arity 1}), :line 119, :end-line 119, :max-fixed-arity 1, :fn-var true, :arglists (quote ([path-pieces])), :doc "Given a seq of path elements as created by parse-path, returns a new\n   seq of path elements, but having gone \"up\" one directory. That is,\n   applies a \"..\" component to the path.", :test true}, ensure-trailing-separator {:protocol-inline nil, :name pathetic.core/ensure-trailing-separator, :variadic false, :file "resources\\public\\js\\compiled\\out\\pathetic\\core.cljs", :end-column 32, :method-params ([path]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil any}, :variadic false, :max-fixed-arity 1}), :line 230, :end-line 230, :max-fixed-arity 1, :fn-var true, :arglists (quote ([path])), :doc "If the path given does not have a trailing separator, returns a new path\n   that has one.", :test true}, split {:protocol-inline nil, :name pathetic.core/split, :variadic false, :file "resources\\public\\js\\compiled\\out\\pathetic\\core.cljs", :end-column 12, :method-params ([path]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil cljs.core/IVector any}, :variadic false, :max-fixed-arity 1}), :line 48, :end-line 48, :max-fixed-arity 1, :fn-var true, :arglists (quote ([path])), :test true}, url-ensure-trailing-separator {:protocol-inline nil, :name pathetic.core/url-ensure-trailing-separator, :variadic false, :file "resources\\public\\js\\compiled\\out\\pathetic\\core.cljs", :end-column 36, :method-params ([url-or-string]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 279, :end-line 279, :max-fixed-arity 1, :fn-var true, :arglists (quote ([url-or-string])), :doc "Behaves like ensure-trailing-separator on the path part of a URL, but takes\n   a j.n.URL or string containing a URL, and returns a string containing the\n   same URL instead of just a path. Everything but the path part of the URL is\n   unchanged (query, anchor, protocol, etc).", :test true}, as-url {:protocol-inline nil, :name pathetic.core/as-url, :variadic false, :file "resources\\public\\js\\compiled\\out\\pathetic\\core.cljs", :end-column 13, :method-params ([url-or-string]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil goog/Uri}, :variadic false, :max-fixed-arity 1}), :line 250, :end-line 250, :max-fixed-arity 1, :fn-var true, :arglists (quote ([url-or-string])), :test true}, resolve {:protocol-inline nil, :name pathetic.core/resolve, :variadic false, :file "resources\\public\\js\\compiled\\out\\pathetic\\core.cljs", :end-column 14, :method-params ([base-path other-path]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 2}), :line 210, :end-line 210, :max-fixed-arity 2, :fn-var true, :arglists (quote ([base-path other-path])), :doc "Resolve the other-path against the base-path. If other-path is absolute,\n   the result is other-path. If other-path is nil, the result is base-path.\n   Otherwise, the result is other-path concatenated onto base-path. Does not\n   normalize its output. Accepts an optional third argument containing a string\n   with the path separator to use.", :test true}, absolute-path? {:protocol-inline nil, :name pathetic.core/absolute-path?, :variadic false, :file "resources\\public\\js\\compiled\\out\\pathetic\\core.cljs", :end-column 21, :method-params ([path]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 114, :end-line 114, :max-fixed-arity 1, :fn-var true, :arglists (quote ([path])), :doc "Returns true if the given argument is an absolute path.", :test true}}, :name pathetic.core, :doc nil, :excludes #{resolve}, :use-macros nil, :require-macros nil, :uses nil, :requires {string goog.string, goog.string goog.string, uri goog.Uri, goog.Uri goog.Uri, clojure.string clojure.string, str clojure.string}, :imports nil}