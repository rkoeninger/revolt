;; Analyzed by ClojureScript 0.0-2850
{:defs {t25668 {:num-fields 6, :protocols #{cljs.core/IMeta flow.deps/Context cljs.core/IWithMeta}, :name flow.deps/t25668, :file "resources\\public\\js\\compiled\\out\\flow\\deps.cljs", :type true, :anonymous true, :column 21, :line 53, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, t25638 {:num-fields 1, :protocols #{cljs.core/IMeta flow.deps/Context cljs.core/IWithMeta}, :name flow.deps/t25638, :file "resources\\public\\js\\compiled\\out\\flow\\deps.cljs", :type true, :anonymous true, :column 3, :line 9, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, ->t25672 {:protocol-inline nil, :protocols #{cljs.core/IMeta flow.deps/Context cljs.core/IWithMeta}, :name flow.deps/->t25672, :variadic false, :file "resources\\public\\js\\compiled\\out\\flow\\deps.cljs", :method-params ([*ctx*25671 parent-ctx !dep-tree f with-watch-context meta25673]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 21, :factory :positional, :methods ({:tag flow.deps/t25672, :variadic false, :max-fixed-arity 6}), :line 53, :max-fixed-arity 6, :fn-var true, :arglists (quote ([*ctx*25671 parent-ctx !dep-tree f with-watch-context meta25673])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :test true}, mark-dep {:protocol-inline nil, :name flow.deps/mark-dep, :variadic false, :file "resources\\public\\js\\compiled\\out\\flow\\deps.cljs", :end-column 15, :method-params ([dep-tree dep value]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic false, :max-fixed-arity 3}), :line 14, :end-line 14, :max-fixed-arity 3, :fn-var true, :arglists (quote ([dep-tree dep value])), :test true}, t25672 {:num-fields 6, :protocols #{cljs.core/IMeta flow.deps/Context cljs.core/IWithMeta}, :name flow.deps/t25672, :file "resources\\public\\js\\compiled\\out\\flow\\deps.cljs", :type true, :anonymous true, :column 21, :line 53, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, mark-deps! {:protocol-inline nil, :name flow.deps/mark-deps!, :variadic false, :file "resources\\public\\js\\compiled\\out\\flow\\deps.cljs", :end-column 17, :method-params ([deps]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 68, :end-line 68, :max-fixed-arity 1, :fn-var true, :arglists (quote ([deps])), :test true}, -mark-deps! {:protocol-inline nil, :protocol flow.deps/Context, :name flow.deps/-mark-deps!, :variadic false, :file "resources\\public\\js\\compiled\\out\\flow\\deps.cljs", :end-column 15, :method-params ([_ deps]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 2}), :line 4, :end-line 6, :max-fixed-arity 2, :fn-var true, :arglists (quote ([_ deps])), :test true}, ->t25668 {:protocol-inline nil, :protocols #{cljs.core/IMeta flow.deps/Context cljs.core/IWithMeta}, :name flow.deps/->t25668, :variadic false, :file "resources\\public\\js\\compiled\\out\\flow\\deps.cljs", :method-params ([*ctx*25667 parent-ctx !dep-tree f with-watch-context meta25669]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 21, :factory :positional, :methods ({:tag flow.deps/t25668, :variadic false, :max-fixed-arity 6}), :line 53, :max-fixed-arity 6, :fn-var true, :arglists (quote ([*ctx*25667 parent-ctx !dep-tree f with-watch-context meta25669])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :test true}, with-watch-context {:protocol-inline nil, :name flow.deps/with-watch-context, :variadic false, :file "resources\\public\\js\\compiled\\out\\flow\\deps.cljs", :end-column 25, :method-params ([f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic false, :max-fixed-arity 1}), :line 50, :end-line 50, :max-fixed-arity 1, :fn-var true, :arglists (quote ([f])), :test true}, *ctx* {:file "resources\\public\\js\\compiled\\out\\flow\\deps.cljs", :end-column 21, :end-line 8, :column 1, :line 8, :dynamic true, :test true, :name flow.deps/*ctx*}, tree-unchanged? {:protocol-inline nil, :name flow.deps/tree-unchanged?, :variadic false, :file "resources\\public\\js\\compiled\\out\\flow\\deps.cljs", :end-column 22, :method-params ([new-value tree]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag boolean, :variadic false, :max-fixed-arity 2}), :line 36, :end-line 36, :max-fixed-arity 2, :fn-var true, :arglists (quote ([new-value tree])), :test true}, -read-dep {:protocol-inline nil, :protocol flow.deps/Context, :name flow.deps/-read-dep, :variadic false, :file "resources\\public\\js\\compiled\\out\\flow\\deps.cljs", :end-column 13, :method-params ([_ dep]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 2}), :line 4, :end-line 5, :max-fixed-arity 2, :fn-var true, :arglists (quote ([_ dep])), :test true}, ->t25638 {:protocol-inline nil, :protocols #{cljs.core/IMeta flow.deps/Context cljs.core/IWithMeta}, :name flow.deps/->t25638, :variadic false, :file "resources\\public\\js\\compiled\\out\\flow\\deps.cljs", :method-params ([meta25639]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :methods ({:tag flow.deps/t25638, :variadic false, :max-fixed-arity 1}), :line 9, :max-fixed-arity 1, :fn-var true, :arglists (quote ([meta25639])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :test true}, Context {:protocol-symbol true, :name flow.deps/Context, :file "resources\\public\\js\\compiled\\out\\flow\\deps.cljs", :end-column 21, :column 1, :line 4, :protocol-info {:methods {-read-dep [[_ dep]], -mark-deps! [[_ deps]]}}, :info nil, :end-line 4, :impls #{flow.deps/t25638 flow.deps/t25672 flow.deps/t25668}, :test true}, merge-deps {:protocol-inline nil, :name flow.deps/merge-deps, :variadic false, :file "resources\\public\\js\\compiled\\out\\flow\\deps.cljs", :end-column 17, :method-params ([deps-1 deps-2]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{any clj-nil}, :variadic false, :max-fixed-arity 2}), :line 28, :end-line 28, :max-fixed-arity 2, :fn-var true, :arglists (quote ([deps-1 deps-2])), :test true}, deps-unchanged? {:protocol-inline nil, :name flow.deps/deps-unchanged?, :variadic false, :file "resources\\public\\js\\compiled\\out\\flow\\deps.cljs", :end-column 22, :method-params ([deps]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag boolean, :variadic false, :max-fixed-arity 1}), :line 45, :end-line 45, :max-fixed-arity 1, :fn-var true, :arglists (quote ([deps])), :test true}, read-dep {:protocol-inline nil, :name flow.deps/read-dep, :variadic false, :file "resources\\public\\js\\compiled\\out\\flow\\deps.cljs", :end-column 15, :method-params ([dep]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 65, :end-line 65, :max-fixed-arity 1, :fn-var true, :arglists (quote ([dep])), :test true}}, :name flow.deps, :doc nil, :excludes #{}, :use-macros nil, :require-macros nil, :uses nil, :requires {flow.cursors flow.cursors, fc flow.cursors}, :imports nil}