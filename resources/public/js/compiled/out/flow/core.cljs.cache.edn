;; Analyzed by ClojureScript 0.0-2850
{:defs {keyed-by {:protocol-inline nil, :name flow.core/keyed-by, :variadic false, :file "resources\\public\\js\\compiled\\out\\flow\\core.cljs", :end-column 15, :method-params ([f coll]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{any cljs.core/LazySeq clj-nil}, :variadic false, :max-fixed-arity 2}), :line 37, :end-line 37, :max-fixed-arity 2, :fn-var true, :arglists (quote ([f coll])), :test true}, on {:protocol-inline nil, :name flow.core/on, :variadic false, :file "resources\\public\\js\\compiled\\out\\flow\\core.cljs", :end-column 9, :method-params ([$el event listener]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 3}), :line 34, :end-line 34, :max-fixed-arity 3, :fn-var true, :arglists (quote ([$el event listener])), :test true}, bind-value! {:protocol-inline nil, :name flow.core/bind-value!, :variadic false, :file "resources\\public\\js\\compiled\\out\\flow\\core.cljs", :end-column 18, :method-params ([cursor]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag function, :variadic false, :max-fixed-arity 1}), :line 30, :end-line 30, :max-fixed-arity 1, :fn-var true, :arglists (quote ([cursor])), :test true}, root {:protocol-inline nil, :name flow.core/root, :variadic false, :file "resources\\public\\js\\compiled\\out\\flow\\core.cljs", :end-column 11, :method-params ([$container el]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 2}), :line 22, :end-line 22, :max-fixed-arity 2, :fn-var true, :arglists (quote ([$container el])), :test true}}, :name flow.core, :doc nil, :excludes #{}, :use-macros nil, :require-macros nil, :uses nil, :requires {flow.forms.symbols flow.forms.symbols, flow.forms.cursors flow.forms.cursors, flow.forms.collections flow.forms.collections, flow.el flow.el, flow.forms.sub-component flow.forms.sub-component, flow.dom.elements flow.dom.elements, flow.forms.case flow.forms.case, fel flow.el, flow.forms.list flow.forms.list, flow.forms.fn-calls flow.forms.fn-calls, flow.forms.if flow.forms.if, fcu flow.cursors, flow.forms.do flow.forms.do, flow.forms.let flow.forms.let, fde flow.dom.elements, flow.forms.node flow.forms.node, flow.forms.primitive flow.forms.primitive, flow.forms.text flow.forms.text, flow.forms.fn-decls flow.forms.fn-decls, flow.cursors flow.cursors, flow.forms.for flow.forms.for}, :imports nil}