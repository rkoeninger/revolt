;; Analyzed by ClojureScript 0.0-2850
{:defs {replace-child! {:protocol-inline nil, :name flow.dom.children/replace-child!, :variadic false, :file "resources\\public\\js\\compiled\\out\\flow\\dom\\children.cljs", :end-column 21, :method-params ([!child-holder new-el-ish]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 2}), :line 51, :end-line 51, :max-fixed-arity 2, :fn-var true, :arglists (quote ([!child-holder new-el-ish])), :test true}, swap-child-el! {:protocol-inline nil, :name flow.dom.children/swap-child-el!, :variadic false, :file "resources\\public\\js\\compiled\\out\\flow\\dom\\children.cljs", :end-column 21, :method-params ([$parent $old-el $new-el]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{any clj-nil}, :variadic false, :max-fixed-arity 3}), :line 37, :end-line 37, :max-fixed-arity 3, :fn-var true, :arglists (quote ([$parent $old-el $new-el])), :test true}, swap-child-seqs! {:protocol-inline nil, :name flow.dom.children/swap-child-seqs!, :variadic false, :file "resources\\public\\js\\compiled\\out\\flow\\dom\\children.cljs", :end-column 23, :method-params ([$parent old-els new-els]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic false, :max-fixed-arity 3}), :line 13, :end-line 13, :max-fixed-arity 3, :fn-var true, :arglists (quote ([$parent old-els new-els])), :test true}, new-child-holder! {:protocol-inline nil, :name flow.dom.children/new-child-holder!, :variadic false, :file "resources\\public\\js\\compiled\\out\\flow\\dom\\children.cljs", :end-column 24, :method-params ([$parent]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 9, :end-line 9, :max-fixed-arity 1, :fn-var true, :arglists (quote ([$parent])), :test true}, with-lock {:protocol-inline nil, :name flow.dom.children/with-lock, :variadic false, :file "resources\\public\\js\\compiled\\out\\flow\\dom\\children.cljs", :end-column 16, :method-params ([obj f]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 2}), :line 5, :end-line 5, :max-fixed-arity 2, :fn-var true, :arglists (quote ([obj f])), :test true}}, :name flow.dom.children, :doc nil, :excludes #{}, :use-macros nil, :require-macros nil, :uses nil, :requires {fdd flow.dom.diff, flow.dom.diff flow.dom.diff, flow.dom.elements flow.dom.elements, fde flow.dom.elements}, :imports nil}