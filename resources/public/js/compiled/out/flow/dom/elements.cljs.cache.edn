;; Analyzed by ClojureScript 0.0-2850
{:defs {bind-value! {:protocol-inline nil, :name flow.dom.elements/bind-value!, :variadic false, :file "resources\\public\\js\\compiled\\out\\flow\\dom\\elements.cljs", :end-column 18, :method-params ([!atom]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag function, :variadic false, :max-fixed-arity 1}), :line 51, :end-line 51, :max-fixed-arity 1, :fn-var true, :arglists (quote ([!atom])), :test true}, add-event-listener! {:protocol-inline nil, :name flow.dom.elements/add-event-listener!, :variadic false, :file "resources\\public\\js\\compiled\\out\\flow\\dom\\elements.cljs", :end-column 26, :method-params ([$el event listener]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 3}), :line 41, :end-line 41, :max-fixed-arity 3, :fn-var true, :arglists (quote ([$el event listener])), :test true}, append-child! {:protocol-inline nil, :name flow.dom.elements/append-child!, :variadic false, :file "resources\\public\\js\\compiled\\out\\flow\\dom\\elements.cljs", :end-column 20, :method-params ([$parent $child]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 2}), :line 17, :end-line 17, :max-fixed-arity 2, :fn-var true, :arglists (quote ([$parent $child])), :test true}, next-sibling {:protocol-inline nil, :name flow.dom.elements/next-sibling, :variadic false, :file "resources\\public\\js\\compiled\\out\\flow\\dom\\elements.cljs", :end-column 19, :method-params ([$parent $child]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 2}), :line 38, :end-line 38, :max-fixed-arity 2, :fn-var true, :arglists (quote ([$parent $child])), :test true}, new-element {:protocol-inline nil, :name flow.dom.elements/new-element, :variadic false, :file "resources\\public\\js\\compiled\\out\\flow\\dom\\elements.cljs", :end-column 18, :method-params ([tag]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 12, :end-line 12, :max-fixed-arity 1, :fn-var true, :arglists (quote ([tag])), :test true}, replace-child! {:protocol-inline nil, :name flow.dom.elements/replace-child!, :variadic false, :file "resources\\public\\js\\compiled\\out\\flow\\dom\\elements.cljs", :end-column 21, :method-params ([$parent $old-child $new-child]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 3}), :line 33, :end-line 33, :max-fixed-arity 3, :fn-var true, :arglists (quote ([$parent $old-child $new-child])), :test true}, insert-before! {:protocol-inline nil, :name flow.dom.elements/insert-before!, :variadic false, :file "resources\\public\\js\\compiled\\out\\flow\\dom\\elements.cljs", :end-column 21, :method-params ([$parent $sibling $child]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 3}), :line 20, :end-line 20, :max-fixed-arity 3, :fn-var true, :arglists (quote ([$parent $sibling $child])), :test true}, value {:protocol-inline nil, :name flow.dom.elements/value, :variadic false, :file "resources\\public\\js\\compiled\\out\\flow\\dom\\elements.cljs", :end-column 12, :method-params ([$el]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic false, :max-fixed-arity 1}), :line 46, :end-line 46, :max-fixed-arity 1, :fn-var true, :arglists (quote ([$el])), :test true}, remove-child! {:protocol-inline nil, :name flow.dom.elements/remove-child!, :variadic false, :file "resources\\public\\js\\compiled\\out\\flow\\dom\\elements.cljs", :end-column 20, :method-params ([$parent $child]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{any clj-nil}, :variadic false, :max-fixed-arity 2}), :line 23, :end-line 23, :max-fixed-arity 2, :fn-var true, :arglists (quote ([$parent $child])), :test true}, clear! {:protocol-inline nil, :name flow.dom.elements/clear!, :variadic false, :file "resources\\public\\js\\compiled\\out\\flow\\dom\\elements.cljs", :end-column 13, :method-params ([$el]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag clj-nil, :variadic false, :max-fixed-arity 1}), :line 27, :end-line 27, :max-fixed-arity 1, :fn-var true, :arglists (quote ([$el])), :test true}, svg-tag? {:file "resources\\public\\js\\compiled\\out\\flow\\dom\\elements.cljs", :end-column 14, :end-line 10, :column 1, :line 10, :test true, :name flow.dom.elements/svg-tag?}, text-el {:protocol-inline nil, :name flow.dom.elements/text-el, :variadic false, :file "resources\\public\\js\\compiled\\out\\flow\\dom\\elements.cljs", :end-column 14, :method-params ([s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 4, :end-line 4, :max-fixed-arity 1, :fn-var true, :arglists (quote ([s])), :test true}, svg-ns {:file "resources\\public\\js\\compiled\\out\\flow\\dom\\elements.cljs", :end-column 12, :end-line 9, :column 1, :line 9, :test true, :name flow.dom.elements/svg-ns}, ->el {:protocol-inline nil, :name flow.dom.elements/->el, :variadic false, :file "resources\\public\\js\\compiled\\out\\flow\\dom\\elements.cljs", :end-column 11, :method-params ([el-ish]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag #{nil any cljs.core/LazySeq}, :variadic false, :max-fixed-arity 1}), :line 60, :end-line 60, :max-fixed-arity 1, :fn-var true, :arglists (quote ([el-ish])), :test true}, null-elem {:protocol-inline nil, :name flow.dom.elements/null-elem, :variadic false, :file "resources\\public\\js\\compiled\\out\\flow\\dom\\elements.cljs", :end-column 16, :method-params ([]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 0}), :line 55, :end-line 55, :max-fixed-arity 0, :fn-var true, :arglists (quote ([])), :test true}}, :name flow.dom.elements, :doc nil, :excludes #{}, :use-macros nil, :require-macros nil, :uses nil, :requires {flow.dom.attributes flow.dom.attributes, fda flow.dom.attributes}, :imports nil}