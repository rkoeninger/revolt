;; Analyzed by ClojureScript 0.0-2850
{:defs {->t20944 {:protocol-inline nil, :protocols #{cljs.core/IMeta cljs.core/IWithMeta chord.format/ChordFormatter}, :name chord.format/->t20944, :variadic false, :file "resources\\public\\js\\compiled\\out\\chord\\format.cljs", :method-params ([_ meta20945]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :methods ({:tag chord.format/t20944, :variadic false, :max-fixed-arity 2}), :line 24, :max-fixed-arity 2, :fn-var true, :arglists (quote ([_ meta20945])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :test true}, wrap-format {:protocol-inline nil, :name chord.format/wrap-format, :variadic false, :file "resources\\public\\js\\compiled\\out\\chord\\format.cljs", :end-column 18, :method-params ([p__20960 p__20961]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core/IMap, :variadic false, :max-fixed-arity 2}), :line 82, :end-line 82, :max-fixed-arity 2, :fn-var true, :arglists (quote ([{:keys [read-ch write-ch]} {:keys [format], :as opts}])), :test true}, ->t20956 {:protocol-inline nil, :protocols #{cljs.core/IMeta cljs.core/IWithMeta chord.format/ChordFormatter}, :name chord.format/->t20956, :variadic false, :file "resources\\public\\js\\compiled\\out\\chord\\format.cljs", :method-params ([_ meta20957]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :methods ({:tag chord.format/t20956, :variadic false, :max-fixed-arity 2}), :line 70, :max-fixed-arity 2, :fn-var true, :arglists (quote ([_ meta20957])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :test true}, ->t20950 {:protocol-inline nil, :protocols #{cljs.core/IMeta cljs.core/IWithMeta chord.format/ChordFormatter}, :name chord.format/->t20950, :variadic false, :file "resources\\public\\js\\compiled\\out\\chord\\format.cljs", :method-params ([json-formatter opts meta20951]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 5, :factory :positional, :methods ({:tag chord.format/t20950, :variadic false, :max-fixed-arity 3}), :line 43, :max-fixed-arity 3, :fn-var true, :arglists (quote ([json-formatter opts meta20951])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :test true}, ->t20953 {:protocol-inline nil, :protocols #{cljs.core/IMeta cljs.core/IWithMeta chord.format/ChordFormatter}, :name chord.format/->t20953, :variadic false, :file "resources\\public\\js\\compiled\\out\\chord\\format.cljs", :method-params ([_ meta20954]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :methods ({:tag chord.format/t20953, :variadic false, :max-fixed-arity 2}), :line 51, :max-fixed-arity 2, :fn-var true, :arglists (quote ([_ meta20954])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :test true}, t20944 {:num-fields 2, :protocols #{cljs.core/IMeta cljs.core/IWithMeta chord.format/ChordFormatter}, :name chord.format/t20944, :file "resources\\public\\js\\compiled\\out\\chord\\format.cljs", :type true, :anonymous true, :column 3, :line 24, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, freeze {:protocol-inline nil, :protocol chord.format/ChordFormatter, :name chord.format/freeze, :variadic false, :file "resources\\public\\js\\compiled\\out\\chord\\format.cljs", :end-column 10, :method-params ([_ obj]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 2}), :line 17, :end-line 18, :max-fixed-arity 2, :fn-var true, :arglists (quote ([_ obj])), :test true}, t20953 {:num-fields 2, :protocols #{cljs.core/IMeta cljs.core/IWithMeta chord.format/ChordFormatter}, :name chord.format/t20953, :file "resources\\public\\js\\compiled\\out\\chord\\format.cljs", :type true, :anonymous true, :column 3, :line 51, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, formatter* {:file "resources\\public\\js\\compiled\\out\\chord\\format.cljs", :end-column 21, :end-line 21, :column 1, :line 21, :test true, :name chord.format/formatter*}, formatter {:protocol-inline nil, :name chord.format/formatter, :variadic false, :file "resources\\public\\js\\compiled\\out\\chord\\format.cljs", :end-column 16, :method-params ([opts]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 1}), :line 77, :end-line 77, :max-fixed-arity 1, :fn-var true, :arglists (quote ([opts])), :test true}, thaw {:protocol-inline nil, :protocol chord.format/ChordFormatter, :name chord.format/thaw, :variadic false, :file "resources\\public\\js\\compiled\\out\\chord\\format.cljs", :end-column 8, :method-params ([_ s]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag any, :variadic false, :max-fixed-arity 2}), :line 17, :end-line 19, :max-fixed-arity 2, :fn-var true, :arglists (quote ([_ s])), :test true}, t20950 {:num-fields 3, :protocols #{cljs.core/IMeta cljs.core/IWithMeta chord.format/ChordFormatter}, :name chord.format/t20950, :file "resources\\public\\js\\compiled\\out\\chord\\format.cljs", :type true, :anonymous true, :column 5, :line 43, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, ChordFormatter {:protocol-symbol true, :name chord.format/ChordFormatter, :file "resources\\public\\js\\compiled\\out\\chord\\format.cljs", :end-column 28, :column 1, :line 17, :protocol-info {:methods {freeze [[_ obj]], thaw [[_ s]]}}, :info nil, :end-line 17, :impls #{chord.format/t20944 chord.format/t20947 chord.format/t20956 chord.format/t20953 chord.format/t20950}, :test true}, t20956 {:num-fields 2, :protocols #{cljs.core/IMeta cljs.core/IWithMeta chord.format/ChordFormatter}, :name chord.format/t20956, :file "resources\\public\\js\\compiled\\out\\chord\\format.cljs", :type true, :anonymous true, :column 3, :line 70, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, ->t20947 {:protocol-inline nil, :protocols #{cljs.core/IMeta cljs.core/IWithMeta chord.format/ChordFormatter}, :name chord.format/->t20947, :variadic false, :file "resources\\public\\js\\compiled\\out\\chord\\format.cljs", :method-params ([_ meta20948]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :methods ({:tag chord.format/t20947, :variadic false, :max-fixed-arity 2}), :line 32, :max-fixed-arity 2, :fn-var true, :arglists (quote ([_ meta20948])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :test true}, t20947 {:num-fields 2, :protocols #{cljs.core/IMeta cljs.core/IWithMeta chord.format/ChordFormatter}, :name chord.format/t20947, :file "resources\\public\\js\\compiled\\out\\chord\\format.cljs", :type true, :anonymous true, :column 3, :line 32, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}}, :name chord.format, :doc nil, :excludes #{}, :use-macros nil, :require-macros nil, :uses {keywordize-keys clojure.walk}, :requires {transit cognitect.transit, cognitect.transit cognitect.transit, clojure.walk clojure.walk, edn cljs.reader, cljs.reader cljs.reader, cljs.core.async cljs.core.async, a cljs.core.async}, :imports nil}