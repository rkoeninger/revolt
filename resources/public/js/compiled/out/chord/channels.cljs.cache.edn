;; Analyzed by ClojureScript 0.0-2850
{:defs {->t21202 {:protocol-inline nil, :protocols #{cljs.core.async.impl.protocols/Channel cljs.core.async.impl.protocols/WritePort cljs.core.async.impl.protocols/ReadPort cljs.core/IMeta cljs.core/IWithMeta}, :name chord.channels/->t21202, :variadic false, :file "resources\\public\\js\\compiled\\out\\chord\\channels.cljs", :method-params ([on-close map__21201 vec__21200 p__21194 write-ch read-ch bidi-ch meta21203]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :methods ({:tag chord.channels/t21202, :variadic false, :max-fixed-arity 8}), :line 31, :max-fixed-arity 8, :fn-var true, :arglists (quote ([on-close map__21201 vec__21200 p__21194 write-ch read-ch bidi-ch meta21203])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :test true}, t21202 {:num-fields 8, :protocols #{cljs.core.async.impl.protocols/Channel cljs.core.async.impl.protocols/WritePort cljs.core.async.impl.protocols/ReadPort cljs.core/IMeta cljs.core/IWithMeta}, :name chord.channels/t21202, :file "resources\\public\\js\\compiled\\out\\chord\\channels.cljs", :type true, :anonymous true, :column 3, :line 31, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, ->t21197 {:protocol-inline nil, :protocols #{cljs.core.async.impl.protocols/Channel cljs.core.async.impl.protocols/WritePort cljs.core.async.impl.protocols/ReadPort cljs.core/IMeta cljs.core/IWithMeta}, :name chord.channels/->t21197, :variadic false, :file "resources\\public\\js\\compiled\\out\\chord\\channels.cljs", :method-params ([on-close map__21196 vec__21195 p__21194 write-ch read-ch bidi-ch meta21198]), :protocol-impl nil, :arglists-meta (nil nil), :anonymous true, :column 3, :factory :positional, :methods ({:tag chord.channels/t21197, :variadic false, :max-fixed-arity 8}), :line 31, :max-fixed-arity 8, :fn-var true, :arglists (quote ([on-close map__21196 vec__21195 p__21194 write-ch read-ch bidi-ch meta21198])), :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}, :test true}, t21197 {:num-fields 8, :protocols #{cljs.core.async.impl.protocols/Channel cljs.core.async.impl.protocols/WritePort cljs.core.async.impl.protocols/ReadPort cljs.core/IMeta cljs.core/IWithMeta}, :name chord.channels/t21197, :file "resources\\public\\js\\compiled\\out\\chord\\channels.cljs", :type true, :anonymous true, :column 3, :line 31, :record false, :skip-protocol-flag #{cljs.core/IMeta cljs.core/IWithMeta}}, bidi-ch {:protocol-inline nil, :name chord.channels/bidi-ch, :variadic true, :file "resources\\public\\js\\compiled\\out\\chord\\channels.cljs", :end-column 14, :method-params ([read-ch write-ch p__21194]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag chord.channels/t21202, :variadic true, :max-fixed-arity 2}), :line 30, :end-line 30, :max-fixed-arity 2, :fn-var true, :arglists (quote ([read-ch write-ch & [{:keys [on-close]}]])), :test true}, write-to-ws! {:protocol-inline nil, :name chord.channels/write-to-ws!, :variadic false, :file "resources\\public\\js\\compiled\\out\\chord\\channels.cljs", :end-column 19, :method-params ([ws ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:tag cljs.core.async.impl.channels/ManyToManyChannel, :variadic false, :max-fixed-arity 2}), :line 22, :end-line 22, :max-fixed-arity 2, :fn-var true, :arglists (quote ([ws ch])), :test true}, read-from-ws! {:protocol-inline nil, :name chord.channels/read-from-ws!, :variadic false, :file "resources\\public\\js\\compiled\\out\\chord\\channels.cljs", :end-column 20, :method-params ([ws ch]), :protocol-impl nil, :arglists-meta (nil nil), :column 1, :methods ({:variadic false, :max-fixed-arity 2}), :line 12, :end-line 12, :max-fixed-arity 2, :fn-var true, :arglists (quote ([ws ch])), :test true}}, :name chord.channels, :doc nil, :excludes #{}, :use-macros {go-loop cljs.core.async.macros}, :require-macros {cljs.core.async.macros cljs.core.async.macros}, :uses {<! cljs.core.async, close! cljs.core.async, chan cljs.core.async, >! cljs.core.async, put! cljs.core.async}, :requires {p cljs.core.async.impl.protocols, cljs.core.async.impl.protocols cljs.core.async.impl.protocols, cljs.core.async cljs.core.async}, :imports nil}